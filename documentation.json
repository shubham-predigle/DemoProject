{
    "pipes": [],
    "interfaces": [
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "Todo",
            "id": "class-Todo-c2410b8cca4dba05666bfa861140f402088afadb0e49e7f137a8dc854a3cd403dd629cc76a0eaadacfec6a8c99469aad7073a95b1981f0ad2e63e82e43b744d8",
            "file": "src/app/Todo.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Todo {\n    sno: Number\n    title: String\n    desc: String\n    active: Boolean\n\n    constructor(sno: Number, title: String, desc: String, active: Boolean) {\n        this.sno = sno;\n        this.title = title;\n        this.desc = desc;\n        this.active = active;\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sno",
                        "type": "Number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "title",
                        "type": "String",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "desc",
                        "type": "String",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "active",
                        "type": "Boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "sno",
                        "type": "Number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "title",
                        "type": "String",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "desc",
                        "type": "String",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "active",
                        "type": "Boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "desc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "sno",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddTodoComponent",
            "id": "component-AddTodoComponent-706fb2a12c1e99fc17c1b6402ce5a6b3f49f8522948b710e39cef45dae8289eca67b33d4e18dcfd66211180ea75569ff2f3e393a462ec1ae322e10895df8dce0",
            "file": "src/app/MyComponents/add-todo/add-todo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-todo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./add-todo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "addTodo",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<Todo>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "desc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputBoxComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { Todo } from '../../Todo';\nimport { ButtonComponent } from '../../../components/Button/button.component';\nimport { InputBoxComponent } from '../../../components/InputBox/input-box.component';\n\n@Component({\n  selector: 'app-add-todo',\n  standalone: true,\n  imports: [FormsModule, ButtonComponent, InputBoxComponent],\n  templateUrl: './add-todo.component.html',\n  styleUrl: './add-todo.component.css'\n})\nexport class AddTodoComponent {\n\n  title!:string;\n  desc!:string;\n\n  @Output() addTodo: EventEmitter<Todo> = new EventEmitter();\n  \n\n  onSubmit(){\n    console.log(\"form submit clicked\");\n    const newTodo ={\n      sno: 8,\n      title: this.title,\n      desc: this.desc,\n      active: true\n    }\n\n    console.log(newTodo);\n\n    this.addTodo.emit(newTodo);\n\n    this.title=\"\";\n    this.desc=\"\";\n  }\n\n}\n",
            "styleUrl": "./add-todo.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<h4 class=\"mb-3 text-center\">Add a Todo</h4>\n\n<form class=\"text-center\" (ngSubmit)=\"onSubmit()\">\n\n  <app-input-box label=\"Title\" placeholder=\"Enter a title\" [value]=\"title\" [required]=\"true\"\n    [errorMessage]=\"'Title is required!'\" (valueChange)=\"title = $event\">\n  </app-input-box>\n\n  <app-input-box label=\"Description\" placeholder=\"Enter a description\" [value]=\"desc\" [required]=\"true\"\n    [errorMessage]=\"'Description is required!'\" (valueChange)=\"desc = $event\">\n  </app-input-box>\n  \n  <storybook-button type=\"submit\" size=\"medium\" label=\"Add Todo\" [primary]=\"true\"></storybook-button>\n\n</form>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-4d191f2ce8e43b73a963a6aa91d724d786284f0fd2461de4ccfbab30fc3c44685a67360c62c50a817df5f7184a4c568a9fa10080ed5197bc9e748e2e47b241af",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'{todo-app-variable}'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TodosComponent",
                    "type": "component"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport {TodosComponent} from './MyComponents/todos/todos.component'\nimport { HeaderComponent } from '../components/Header/header.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [TodosComponent, HeaderComponent],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css'\n})\nexport class AppComponent {\n  title: string = '{todo-app-variable}';\n\n  //constructor() { } // Dependency injection\n  // Using ngOnInit ensures that the logic runs after Angular has finished initializing the component and its bindings, which makes it a safer place for logic like this.\n  // ngOnInit() { // lifecycle hooks\n  //   setTimeout(() => {\n  //     this.title = \"changed\";\n  //   }, 4000);\n  // }\n}\n",
            "styleUrl": "./app.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!-- All html goes to app-root -->\n <!-- CSS coming from app.component.css -->\n\n<div class=\"container\">\n  <storybook-header></storybook-header>\n  <h1 class=\"my-4 text-center\">Welcome to TODO App!</h1>\n    <app-todos></app-todos>\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-193adca95c57e727b7448ede0e5a7e76252a734648226cf7b2b5ca77a3a6ef60e4f410f4693377c7da0b1af90477012efebdbeaedc3550eb14051c29d2e1b78e",
            "file": "src/components/Button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick()\"\n  [ngClass]=\"classes\"\n  [type]=\"type\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "Boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "\"medium\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick()\"\n  [ngClass]=\"classes\"\n  [type]=\"type\" \n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n\n  @Input()\n  primary: Boolean = true;\n\n  @Input()\n  backgroundColor?: string;\n\n  @Input()\n  size?: string = \"medium\";\n\n  @Input()\n  label = 'Button';\n\n  @Input()\n  type: string = 'button';\n\n  @Output()\n  buttonClick = new EventEmitter<void>();\n\n  onClick(): void {\n    this.buttonClick.emit();\n  }\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #1ea7fd;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-bd1bb2bc163942365af483d6f89fdfdb51cce6857db599c9fcf12dd2cb6fb53b05748db51014150bfed4daa43b7c2b0a9c2dc48dcf347abbee5f0f043ee3ecc1",
            "file": "src/components/Card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [],
            "styles": [],
            "template": "<div [id]=\"id\" [ngStyle]=\"getCardStyles()\" class=\"storybook-card\">    <h3>{{title}}</h3>\n    <p>{{description}}</p>\n    <storybook-button\n     backgroundColor=\"{{buttonBgColor}}\"\n     size=\"medium\" label=\"Delete\"\n     [primary]=\"primary\"\n     (buttonClick)=\"cardBtnClicked()\"\n    >\n    </storybook-button>\n</div>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonBgColor",
                    "defaultValue": "\"#DC3545\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "String",
                    "decorators": []
                },
                {
                    "name": "cardBgColor",
                    "defaultValue": "\"#fff\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "String",
                    "decorators": []
                },
                {
                    "name": "cardBorderColor",
                    "defaultValue": "\"#DC3545\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "String",
                    "decorators": []
                },
                {
                    "name": "cardBoxShadow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "Boolean",
                    "decorators": []
                },
                {
                    "name": "customStyles",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "description",
                    "defaultValue": "'description'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "`card-${Math.random().toString(36).substr(2, 9)}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "Todo",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "Boolean",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "\"title\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "String",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "itemClicked",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "EventEmitter<Todo>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "cardBtnClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCardStyles",
                    "args": [],
                    "optional": false,
                    "returnType": "{ 'border-color': String; 'box-shadow': string; 'background-color': String; }",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common'; // Import CommonModule for ngStyle\nimport { ButtonComponent } from '../Button/button.component';\nimport { Todo } from '../../app/Todo';\n\n@Component({\n  selector: 'app-card',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<div [id]=\"id\" [ngStyle]=\"getCardStyles()\" class=\"storybook-card\">\n    <h3>{{title}}</h3>\n    <p>{{description}}</p>\n    <storybook-button \n     backgroundColor=\"{{buttonBgColor}}\" \n     size=\"medium\" label=\"Delete\"\n     [primary]=\"primary\"\n     (buttonClick)=\"cardBtnClicked()\"\n    >\n    </storybook-button>\n</div>`,\n  styleUrl: './card.component.css'\n})\nexport class CardComponent {\n\n  @Input()\n  item!: Todo;\n\n  @Input() \n  id: string = `card-${Math.random().toString(36).substr(2, 9)}`;\n\n  @Input()\n  title: String = \"title\";\n\n  @Input()\n  description: string = 'description';\n\n  @Input()\n  buttonBgColor: String = \"#DC3545\";\n\n  @Input()\n  cardBgColor: String = \"#fff\";\n\n  @Input()\n  cardBoxShadow: Boolean = false;\n\n  @Input()\n  cardBorderColor: String = \"#DC3545\";\n\n  @Input() customStyles: { [key: string]: string } = {};\n\n  @Input()\n  primary: Boolean = true;\n\n  @Output() itemClicked: EventEmitter<Todo> = new EventEmitter();\n\n  cardBtnClicked() {\n    console.log(this.item.title);\n    this.itemClicked.emit(this.item);\n  }\n\n  getCardStyles() {\n    return {\n      'border-color': this.cardBorderColor,\n      'box-shadow': this.cardBoxShadow ? '0 4px 8px rgba(0, 0, 0, 0.2)' : 'none',\n      'background-color': this.cardBgColor,\n    };\n  }\n\n}\n",
            "styleUrl": "./card.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "DisplayTodoComponent",
            "id": "component-DisplayTodoComponent-08172e3a5cedbae120f5ba5b2c6cd8a59c6185adbb29f93a0b3dbb18df757cb609ba6510165d244a502e748bbb0f8b3f17778f91199bd53d4fc0a9e1b42f89e0",
            "file": "src/app/MyComponents/display-todo/display-todo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-display-todo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./display-todo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "todo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Todo",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "todoDelete",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<Todo>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleClick",
                    "args": [
                        {
                            "name": "todo",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "todo",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CardComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Todo } from '../../Todo';\nimport { CardComponent } from '../../../components/Card/card.component';\n\n@Component({\n  selector: 'app-display-todo',\n  standalone: true,\n  imports: [CardComponent],\n  templateUrl: './display-todo.component.html',\n  styleUrl: './display-todo.component.css'\n})\nexport class DisplayTodoComponent {\n\n  @Input() todo!:Todo;\n  @Output() todoDelete: EventEmitter<Todo> = new EventEmitter();\n\n  handleClick(todo:Todo){\n    console.log('delete clicked');\n    this.todoDelete.emit(todo);\n  }\n\n  constructor(){}\n\n}\n",
            "styleUrl": "./display-todo.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "extends": [],
            "templateData": "<div class=\"mb-4 text-center\">\n    <app-card title=\"{{todo.title}}\"\n     description=\"{{todo.desc}}\"\n      [item]=\"todo\"\n      (itemClicked)=\"handleClick($event)\"\n    >\n    </app-card>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a2288bbf13b0bd1ce76d4e8bb884ed4c7a38ffab5420e0a0eb1258175618c245c8d00a5299b9594b1d977a614ed4fe051ec15c00469943dc940cdb34930384bb",
            "file": "src/components/Header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>ToDo</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from '../Button/button.component';\nimport type { User } from '../../stories/user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>ToDo</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "InputBoxComponent",
            "id": "component-InputBoxComponent-bb48ff6186aa9f7ab88cf8a56825d28bf3e931615866e7a9c163f7a62423fec54696b7a5e705a2c7bf9b4f7fbed9c192b3e7523995632af2c40e896d22404fe4",
            "file": "src/components/InputBox/input-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input-box",
            "styleUrls": [],
            "styles": [],
            "template": " <label *ngIf=\"label\" [for]=\"id\">{{ label }}</label>\n<div class=\"storybook-input\">\n    <input\n      [id]=\"id\"\n      [type]=\"type\"\n      [value]=\"value || ''\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      [disabled]=\"disabled\"\n      (input)=\"onInput($event)\"\n      [ngClass]=\"{'invalid': isInvalid}\"\n      class=\"storybook-input\"\n    />\n    <p *ngIf=\"errorMessage && isInvalid\" class=\"error-message\">{{ errorMessage }}</p>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "'This field is required.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "`input-${Math.random().toString(36).substr(2, 9)}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isInvalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-input-box',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  template: `\n   <label *ngIf=\"label\" [for]=\"id\">{{ label }}</label>\n  <div class=\"storybook-input\">\n      <input\n        [id]=\"id\"\n        [type]=\"type\"\n        [value]=\"value || ''\"\n        [placeholder]=\"placeholder\"\n        [required]=\"required\"\n        [disabled]=\"disabled\"\n        (input)=\"onInput($event)\"\n        [ngClass]=\"{'invalid': isInvalid}\"\n        class=\"storybook-input\"\n      />\n      <p *ngIf=\"errorMessage && isInvalid\" class=\"error-message\">{{ errorMessage }}</p>\n    </div>`,\n  styleUrl: './input-box.component.css'\n})\nexport class InputBoxComponent {\n\n  @Input() \n  id: string = `input-${Math.random().toString(36).substr(2, 9)}`;\n\n  @Input() \n  label?: string;\n\n  @Input() \n  type: string = 'text';\n\n  @Input() \n  placeholder: string = '';\n\n  @Input() \n  value: string = '';\n  \n  @Input() required: boolean = false;\n  @Input() disabled: boolean = false;\n  @Input() errorMessage: string = 'This field is required.';\n\n  @Output() valueChange = new EventEmitter<string>();\n\n  isInvalid: boolean = false;\n\n  onInput(event: Event): void {\n    const target = event.target as HTMLInputElement;\n    this.value = target.value;\n    this.isInvalid = this.required && !this.value.trim();\n    this.valueChange.emit(this.value);\n  }\n}\n",
            "styleUrl": "./input-box.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TodosComponent",
            "id": "component-TodosComponent-6d47f9725227e9b0b5c4b1d57c838421f193712321510d0d819c156a3f5cb90af657a436b37ea165316f2fa0c915c85b3e9f819de678f663acba9f99e8363419",
            "file": "src/app/MyComponents/todos/todos.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todos",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./todos.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "todos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Todo[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "addTodo",
                    "args": [
                        {
                            "name": "newtodo",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newtodo",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTodo",
                    "args": [
                        {
                            "name": "todelete",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "todelete",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "DisplayTodoComponent",
                    "type": "component"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "AddTodoComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Todo } from '../../Todo';\nimport {DisplayTodoComponent} from '../display-todo/display-todo.component'\nimport { NgFor } from '@angular/common';\nimport { AddTodoComponent } from '../add-todo/add-todo.component';\n\n@Component({\n  selector: 'app-todos',\n  standalone: true,\n  imports: [DisplayTodoComponent, NgFor, AddTodoComponent],\n  templateUrl: './todos.component.html',\n  styleUrl: './todos.component.css'\n})\nexport class TodosComponent implements OnInit {\n\n  todos: Todo[];\n\n  constructor(){\n    this.todos = [\n      {\n        sno: 5,\n        title: \"title4\",\n        desc: \"String\",\n        active: true,\n      },\n      {\n        sno: 6,\n        title: \"title5\",\n        desc: \"String\",\n        active: true,\n      },\n      {\n        sno: 7,\n        title: \"title6\",\n        desc: \"String\",\n        active: true,\n      },\n    ]\n  }\n\n  deleteTodo(todelete:Todo){\n    console.log(\"parent delete todo triggered\")\n    this.todos = this.todos.filter((todo)=>todo.sno !== todelete.sno);\n  }\n\n  addTodo(newtodo: Todo){\n    this.todos.push(newtodo);\n  }\n\n\n  ngOnInit(): void {\n  }\n}\n",
            "styleUrl": "./todos.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-add-todo (addTodo)=\"addTodo($event)\"></app-add-todo>\n<h4 class=\"mb-3 my-4 text-center\">Your Todos</h4>\n<div class=\"text-center\" style=\"display: flex; gap: 9px;\">\n   <div *ngFor=\"let todo of todos\" >\n      <app-display-todo [todo]=\"todo\" (todoDelete)=\"deleteTodo($event)\"></app-display-todo>\n   </div>\n</div>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/MyComponents/add-todo/add-todo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddTodoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/MyComponents/display-todo/display-todo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DisplayTodoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/MyComponents/todos/todos.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodosComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/Todo.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Todo",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/Button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/components/Card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/components/Header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/components/InputBox/input-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}